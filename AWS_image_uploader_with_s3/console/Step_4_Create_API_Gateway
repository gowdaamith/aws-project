

# Step 5 — Create an HTTP API in API Gateway and attach it to your Lambda (very detailed)

## 5.0 Quick summary of what we’ll do

1. Create an **HTTP API** resource.
2. Create a **Lambda integration** and attach it to the API.
3. Add the **POST /upload** route and attach the Lambda integration.
4. Configure **CORS** so the browser can call the API.
5. Deploy (create a stage) and copy the **Invoke URL**.
6. Test the endpoint (console + curl + browser).
7. Troubleshoot common issues (permissions, CORS, JSON body).

---

## 5.1 Open the API Gateway console

* Console: **AWS Console → Services → API Gateway**.
* Choose **HTTP APIs** (not REST APIs). HTTP APIs are simpler & cheaper and work perfectly for Lambda proxy use-cases. ([AWS Documentation][2])

---

## 5.2 Create a new HTTP API

1. Click **Create API** → choose **Build** under **HTTP API**.
2. On the **Create an HTTP API** page:

   * **Name**: `ImageUploaderAPI`
   * Optionally add a Description.
3. For **Integration** choose **Add integration** → **Lambda**.

> Note: you can create the integration now, or create the API first and add integrations later. Either is fine. The console usually guides you through adding a Lambda integration during creation. ([AWS Documentation][3])

---

## 5.3 Create / choose the Lambda integration

1. Click **Lambda**, then choose:

   * **Region**: the region where your `UploadImageLambda` exists.
   * **Lambda function**: select `UploadImageLambda` from the dropdown.
2. **Integration type** — for HTTP APIs the console uses a Lambda proxy style integration (API Gateway forwards request as-is and returns Lambda response). This means you don’t need to write mapping templates for most use cases. ([AWS Documentation][1])
3. Click **Add** (or **Attach**).

**What happens behind the scenes:** API Gateway will create an integration and also create the necessary IAM permission that allows API Gateway to invoke your Lambda. The console usually sets that permission automatically (a `lambda:AddPermission` call). If it fails, you will see an error and you can add the permission manually (I’ll show a snippet below).

---

## 5.4 Add the route: POST /upload

1. Under **Routes** click **Create** (or **Add route**).
2. Method: **POST**
3. Resource path: `/upload`
4. Click **Create**.

Now attach the integration to this route:

1. Select the new route `/upload` in the list.
2. Under **Integration** click **Attach integration** (or choose the integration you created: `UploadImageLambda`).
3. Save.

**Why route matters:** this tells API Gateway when it receives a `POST /upload` request to forward it to your Lambda.

---

## 5.5 Configure CORS (very important for browser clients)

HTTP APIs provide a built-in CORS configuration:

1. In your API view, click **CORS** or click the route `/upload` → **CORS** tab.
2. Click **Configure CORS** (or **Enable**).

   * **Allow origins**: `*` (or better, `https://your-frontend-domain.com` for production)
   * **Allow methods**: `POST, OPTIONS`
   * **Allow headers**: `Content-Type, Authorization` (or `*` if you prefer)
   * **Expose headers**: (optional) leave blank or add headers you need
   * **Max age**: optional
3. Save/Apply.

**Important notes:**

* If you configure CORS in API Gateway, API Gateway will return CORS headers for preflight OPTIONS requests and for responses. AWS docs note that when CORS is configured in the HTTP API, API Gateway ignores CORS headers returned by your Lambda — so prefer configuring CORS in API Gateway rather than relying only on Lambda. ([AWS Documentation][4])
* For Lambda proxy integration, you may still want to include `Access-Control-Allow-Origin` in your Lambda response headers to handle edge cases (and server-side errors). See later troubleshooting.

---

## 5.6 Deploy the API (create a Stage)

1. In the left menu click **Stages** → **Create** (or **Deployments** → **Create stage** depending on console).
2. Stage name: `prod` (or `dev`).
3. Click **Create**.

Once a stage exists, you’ll see an **Invoke URL** in the API summary. It looks like:

```
https://{api-id}.{region}.api.aws/<stage>
```

Your POST endpoint URL will be:

```
https://{api-id}.{region}.api.aws/<stage>/upload
```

Copy that URL — you’ll use it in your frontend JS.

---

## 5.7 Test the route (Console, curl, and frontend)

### A. Test via API Gateway Console (quick)

1. Go to **Routes** → select `/upload` → Click **Test**.
2. Method: `POST`
3. Body: paste JSON:

```json
{
  "image": "<base64 string>",
  "filename": "api_test.png"
}
```

4. Click **Send**.

You should see the Lambda response (status code 200 and the `file_url`) if everything is wired correctly. ([AWS Documentation][3])

### B. Test with `curl` (emulates client)

```bash
API_URL="https://{api-id}.{region}.api.aws/prod/upload"
curl -X POST "$API_URL" \
  -H "Content-Type: application/json" \
  -d '{"image":"<base64>","filename":"curl_test.png"}'
```

Expect JSON response with `file_url`.

### C. Test from browser/front-end

* Update your `index.html` to use the `API_URL` above.
* Try uploading an image from the browser; open Developer Tools Console to see response and any CORS errors.

---

## 5.8 What to do if API Gateway can't invoke your Lambda (permission error)

* If you see an error like `Execution failed due to configuration error` or permission denied, likely API Gateway doesn’t have permission to invoke the Lambda.
* The console normally adds permission automatically. To add manually run (AWS CLI) or use console:

**AWS CLI example** (replace placeholders):

```bash
aws lambda add-permission \
  --function-name UploadImageLambda \
  --statement-id apigw-invoke \
  --action "lambda:InvokeFunction" \
  --principal apigateway.amazonaws.com \
  --source-arn "arn:aws:execute-api:{region}:{account-id}:{api-id}/*/POST/upload"
```

This grants API Gateway the ability to invoke your Lambda. ([AWS Documentation][5])

---

## 5.9 Response mapping & headers (Lambda proxy behavior)

* With Lambda proxy integration (the default for HTTP APIs), API Gateway forwards the incoming request as an event object where the body is present in `event['body']`. Your Lambda code `body = json.loads(event['body'])` is correct.
* Your Lambda must return a response JSON with `statusCode`, `headers` (optional), and `body` (stringified JSON). Example:

```python
return {
  "statusCode": 200,
  "headers": {"Access-Control-Allow-Origin": "*"},
  "body": json.dumps({"message": "Upload successful", "file_url": url})
}
```

* Because we enabled CORS in API Gateway, API Gateway may override or add headers — but adding the header in Lambda is safe and helps during debugging. ([AWS Documentation][6])

---

## 5.10 Common gotchas & how to fix them

1. **CORS errors in browser**

   * Symptom: `Access to fetch at '...' from origin '...' has been blocked by CORS policy`.
   * Fix: Ensure CORS is enabled in API Gateway (Allow Origin) and that the `OPTIONS` method is configured (HTTP API handles OPTIONS automatically when you enable CORS). Also confirm request `Content-Type` is `application/json`.

2. **403 / Access Denied when opening S3 URL**

   * Symptom: S3 object returns 403.
   * Fix: Make object public or use presigned URL. In `s3.put_object` use `ACL='public-read'` to make object public, or better: keep bucket private and return a presigned URL from Lambda.

3. **Lambda times out or memory error**

   * Symptom: Upload fails for large images.
   * Fix: Increase Lambda timeout and memory. For heavy image processing, consider S3 direct upload or using pre-signed URLs to avoid base64 upload overhead.

4. **API Gateway returns 502 or 500**

   * Symptom: Bad gateway.
   * Fix: Check Lambda logs in CloudWatch for stack trace. Also ensure Lambda returns properly formatted proxy response (statusCode, body as string).

5. **Base64 payload too large**

   * Symptom: Client or API fails for large images.
   * Fix: Use multipart/form-data direct-to-S3 uploads or presigned POSTs for better performance.

---

## 5.11 Helpful links (official docs)

* Lambda integrations for HTTP APIs. ([AWS Documentation][1])
* HTTP APIs overview. ([AWS Documentation][2])
* Configure CORS for HTTP APIs. ([AWS Documentation][4])

---

